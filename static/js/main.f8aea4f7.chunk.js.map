{"version":3,"sources":["contexts/NetflixContext.js","api/NetflixAPI.js","data/Constants.js","provider/ContextProvider.js","components/NavBar.js","components/FullDetailPage.js","components/TitleDetail.js","components/AdvancedSearch.js","components/Intro.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["NetflixContext","createContext","TitleAPI","baseUrl","_headers","Headers","append","getNewTitles","callback","request","Request","concat","method","headers","mode","fetch","then","response","console","log","json","data","catch","err","getNewEpisodes","getTitles","searchString","startYear","endYear","type","genreID","imdbMin","imdbMax","getTitleDetail","id","RESULT","DEFAULT_IMDB_MIN","DEFAULT_IMDB_MAX","IMDB_LUCKYPICK_MIN","IMDB_LUCKYPICK_MAX","EARLIEST_PRODUCTION_YEAR","ALL_TYPES","ALL_GENRES","DEFAULT_VIEW_TYPE","DEFAULT_MEDIA_TYPE","ContextProvider","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setCurrentYear","fetchNewEpisodes","handleChange","event","setState","defineProperty","target","name","value","currentYear","Date","stateCopy","objectSpread","state","getFullYear","fetchTitles","NetflixAPI","allTitles","ITEMS","count","COUNT","titleDetail","pickRandomTitle","Constants","luckyPickItemCount","displayRandomTitle","luckyPickIndex","Math","floor","random","length","fetchTitleDetail","netflixid","changeView","view","titleDetailPlot","imdbinfo","plot","titleDetailActors","people","actor","fetchNewTitles","episodes","results","clearTitles","clearTitle","clearAllTitles","performQuickSearch","alert","performAdvancedSearch","sanitizeString","string","sanitizedString","includes","pos","indexOf","substr","split","join","react_default","a","createElement","contexts_NetflixContext","Provider","props","children","Component","NetflixNav","Consumer","_ref","Navbar","bg","variant","expand","Brand","href","onClick","style","color","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Genres","map","genre","Item","Divider","Form","inline","onSubmit","e","preventDefault","FormControl","placeholder","onChange","onKeyDown","keyCode","Button","FullDetailPage","nfinfo","Row","Col","src","image1","alt","item","key","creator","director","language","imdbid","rating","runtime","TitleDetail","class","margin","image","width","synopsis","AdvancedSearch","Label","Control","defaultValue","as","ContentTypes","marginTop","Intro","Jumbotron","Badge","components_AdvancedSearch","Table","marginBottom","ButtonGroup","size","components_Intro","flexWrap","components_TitleDetail","onclick","App","provider_ContextProvider","Container","NavBar","components_FullDetailPage","components_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8aea4f7.chunk.js","sourcesContent":["import  {createContext} from 'react';\r\nconst NetflixContext = createContext()\r\nexport default NetflixContext;\r\n\r\n\r\n\r\n","let TitleAPI = {};\r\nconst baseUrl = 'https://unogs-unogs-v1.p.rapidapi.com/';\r\nconst _headers = new Headers();\r\n_headers.append('X-RapidAPI-Host','unogs-unogs-v1.p.rapidapi.com');\r\n_headers.append('X-RapidAPI-Key','cf523eed82mshed7e62394e60ba7p1091d6jsn2c974a328b59')\r\n\r\nTitleAPI.getNewTitles = (callback) => {\r\n    let request = new Request(`${baseUrl}/aaapi.cgi?q=get:new7:CA&p=1&t=ns&st=adv`,  {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            console.log('response: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        }); \r\n}\r\n\r\nTitleAPI.getNewEpisodes = (callback) => {\r\n    let request = new Request(`${baseUrl}/aaapi.cgi?t=weeklynew&cl=CA&q={query}&st=1`,  {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            console.log('response: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        }); \r\n}\r\n\r\nTitleAPI.getTitles = (searchString, startYear, endYear, type, genreID, imdbMin, imdbMax, callback) => {\r\n        let request = new Request(`${baseUrl}/aaapi.cgi?q=${searchString}-!${startYear},${endYear}-!0,5-!${imdbMin},${imdbMax}-!${genreID}-!${type}-!english-!Any-!gt0-!{downloadable}&t=ns&cl=33&st=adv&ob=Relevance&p=1&sa=and`, {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            console.log('response: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        });\r\n}\r\n\r\nTitleAPI.getTitleDetail = (id, callback) => {\r\n    let request = new Request(`${baseUrl}/aaapi.cgi?t=loadvideo&q=${id}`,  {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            console.log('response: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data.RESULT);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        }); \r\n}\r\n\r\nexport default TitleAPI;","export const DEFAULT_IMDB_MIN = 0;\r\nexport const DEFAULT_IMDB_MAX = 10;\r\nexport const IMDB_LUCKYPICK_MIN = 8;\r\nexport const IMDB_LUCKYPICK_MAX = 10;\r\nexport const EARLIEST_PRODUCTION_YEAR = 1900;\r\nexport const ALL_TYPES = \"Any\";\r\nexport const ALL_GENRES = \"Any\";\r\nexport const ALL_ITEMS = \"Any\";\r\nexport const DEFAULT_VIEW_TYPE = \"icon\";\r\nexport const DEFAULT_MEDIA_TYPE = \"movie\";\r\nexport default  ALL_ITEMS;","import React, {Component} from 'react';\r\nimport Context from '../contexts/NetflixContext';\r\nimport NetflixAPI from '../api/NetflixAPI';\r\nimport * as Constants from '../data/Constants';\r\n\r\n{/* This ContextProvider class contains all the App's state variables and functions */}\r\n\r\nclass ContextProvider extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          allTitles:  [],\r\n          count: 0,\r\n          episodes: [],\r\n          titleDetail : null,\r\n          titleDetailPlot: null,\r\n          titleDetailActors: [],\r\n          startYear: Constants.EARLIEST_PRODUCTION_YEAR, \r\n          endYear: null,      // Used in advanced search\r\n          currentYear: null,  // Used in quick search\r\n          searchString: null,\r\n          genreID: null,\r\n          view: Constants.DEFAULT_VIEW_TYPE,\r\n          type: Constants.DEFAULT_MEDIA_TYPE,\r\n          imdbMin: Constants.DEFAULT_IMDB_MIN,\r\n          imdbMax: Constants.DEFAULT_IMDB_MAX\r\n        }\r\n    }\r\n\r\n//Set current year and default value for end year. Populate intro page\r\ncomponentDidMount = () => {\r\n  this.setCurrentYear();\r\n  this.fetchNewEpisodes();\r\n}\r\n      \r\n//General input handling\r\nhandleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value});\r\n}\r\n\r\n//Calculates for the current year\r\nsetCurrentYear = () => {\r\n  let currentYear = new Date();\r\n  let stateCopy = {...this.state};\r\n  stateCopy.currentYear = currentYear.getFullYear();\r\n  stateCopy.endYear = currentYear.getFullYear();\r\n  this.setState(stateCopy);\r\n}\r\n\r\nfetchTitles = (searchString, startYear, endYear, type, genreID, imdbMin, imdbMax) => {\r\n  NetflixAPI.getTitles(searchString, startYear, endYear, type, genreID, imdbMin, imdbMax, (data) => {\r\n    let stateCopy = {...this.state};\r\n    stateCopy.allTitles = data.ITEMS;\r\n    stateCopy.count = data.COUNT;\r\n    stateCopy.titleDetail = null;\r\n    this.setState(stateCopy);\r\n  }) \r\n}\r\n\r\n//Get a list of all content with ratings ranging from 8-10. The list will be used for picking a random title\r\npickRandomTitle = () => {\r\n  NetflixAPI.getTitles('', \r\n    Constants.EARLIEST_PRODUCTION_YEAR, \r\n    this.state.currentYear, \r\n    Constants.ALL_TYPES,\r\n    Constants.ALL_GENRES, \r\n    Constants.IMDB_LUCKYPICK_MIN, \r\n    Constants.IMDB_LUCKYPICK_MAX, \r\n    (data) => {\r\n      let stateCopy = {...this.state};\r\n      stateCopy.allTitles = data.ITEMS;\r\n      stateCopy.luckyPickItemCount = data.COUNT;\r\n      this.setState(stateCopy, () => {this.displayRandomTitle()});\r\n  }) \r\n}\r\n\r\ndisplayRandomTitle = () => {\r\n  let luckyPickIndex = 0;\r\n  //Get random number from 1 to number of items in the lucky pick storage\r\n  luckyPickIndex = Math.floor(Math.random() * this.state.allTitles.length);\r\n  if(luckyPickIndex >= 0){\r\n    this.fetchTitleDetail(this.state.allTitles[luckyPickIndex].netflixid);\r\n  }\r\n}\r\n\r\n//Sets table view to Icon, Detail or List\r\nchangeView = (view) => {\r\n  let stateCopy = {...this.state};\r\n  stateCopy.view = view;\r\n  this.setState(stateCopy);\r\n}\r\n\r\n//Get complete details of a title using netflixid as input\r\nfetchTitleDetail = (id) => {\r\n  NetflixAPI.getTitleDetail(id, (data) => {\r\n    let stateCopy = {...this.state};\r\n    stateCopy.titleDetail = data;\r\n    stateCopy.titleDetailPlot = data.imdbinfo.plot;\r\n    stateCopy.titleDetailActors = data.people[0].actor;\r\n    this.setState(stateCopy);\r\n  })\r\n}\r\n\r\n//Get new content from the past 7 days\r\nfetchNewTitles = () => {\r\n  NetflixAPI.getNewTitles((data) => {\r\n    let stateCopy = {...this.state};\r\n    stateCopy.allTitles = data.ITEMS;\r\n    stateCopy.count = data.COUNT;\r\n    stateCopy.titleDetail = null;\r\n    this.setState(stateCopy);\r\n  })\r\n}\r\n\r\n//Get new series episodes from the past 24 hours\r\nfetchNewEpisodes = () => {\r\n  NetflixAPI.getNewEpisodes((data) => {\r\n    let stateCopy = {...this.state};\r\n    stateCopy.episodes = data.results;\r\n    this.setState(stateCopy);\r\n  })\r\n}\r\n\r\n//Removes all titles\r\nclearTitles = () => {\r\n  let stateCopy = {...this.state};\r\n  stateCopy.allTitles = [];\r\n  this.setState(stateCopy);\r\n}\r\n\r\n//Removes selected title details\r\nclearTitle = () => {\r\n  let stateCopy = {...this.state};\r\n  stateCopy.titleDetail = '';\r\n  this.setState(stateCopy);\r\n}\r\n\r\n//Removes all titles and selected title details, used when going to the home page\r\nclearAllTitles = () => {\r\n  let stateCopy = {...this.state};\r\n  stateCopy.allTitles = [];\r\n  stateCopy.titleDetail = '';\r\n  this.setState(stateCopy);\r\n}\r\n\r\nperformQuickSearch = () => {\r\n  if(this.state.searchString === null || this.state.searchString.length < 3){ \r\n    alert(\"Minimum search entry is 3 characters.\"); \r\n  } else {  \r\n    this.fetchTitles(\r\n        this.state.searchString, \r\n        Constants.EARLIEST_PRODUCTION_YEAR, \r\n        this.state.currentYear, \r\n        Constants.ALL_GENRES, \r\n        Constants.ALL_TYPES, \r\n        Constants.DEFAULT_IMDB_MIN, \r\n        Constants.DEFAULT_IMDB_MAX\r\n    )\r\n  }\r\n}\r\n\r\nperformAdvancedSearch = () => {\r\n  if (this.state.startYear < 1900 || this.state.endYear > 2019){\r\n    alert(\"Year cannot be less than 1900 or more than 2019\");\r\n  } else if (this.state.imdbMin < 0 || this.state.imdbMax > 10) {\r\n    alert(\"IMDB score cannot be less than 0 or more than 10\");\r\n  } else {\r\n    this.fetchTitles('', this.state.startYear, this.state.endYear, this.state.type, this.state.genreID, this.state.imdbMin, this.state.imdbMax)\r\n  }\r\n}\r\n\r\nsanitizeString = (string) => {\r\n  let sanitizedString = string;\r\n  //remove html tags at the end of string\r\n  if(sanitizedString.includes(\"<\")) {\r\n    let pos = sanitizedString.indexOf(\"<\"); \r\n    sanitizedString = sanitizedString.substr(0,pos);\r\n  }\r\n  sanitizedString = sanitizedString.split(\"&amp;#39;\").join(\"'\");\r\n  sanitizedString = sanitizedString.split(\"&#39;\").join(\"'\");\r\n  sanitizedString = sanitizedString.split(\"&rsquo;\").join(\"'\");\r\n  return sanitizedString;\r\n}\r\n\r\nrender(){\r\n    return(\r\n        <Context.Provider value={{\r\n            state: this.state, \r\n            handleChange: this.handleChange,\r\n            fetchTitles: this.fetchTitles,\r\n            changeView: this.changeView,\r\n            fetchTitleDetail: this.fetchTitleDetail,\r\n            fetchNewTitles: this.fetchNewTitles,\r\n            clearTitles: this.clearTitles,\r\n            clearAllTitles: this.clearAllTitles,\r\n            clearTitle: this.clearTitle,\r\n            pickRandomTitle: this.pickRandomTitle,\r\n            performQuickSearch: this.performQuickSearch,\r\n            performAdvancedSearch: this.performAdvancedSearch,\r\n            sanitizeString: this.sanitizeString\r\n            }}>\r\n        {this.props.children}\r\n        </Context.Provider>\r\n    );\r\n}\r\n}\r\n\r\nexport default ContextProvider;\r\n","import React from 'react';\r\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\r\nimport Context from '../contexts/NetflixContext'\r\nimport * as Constants from '../data/Constants';\r\nimport Genres from '../data/genres';\r\n\r\n{/*This navbar component links to the following functions\r\n    1. What's New - Displays new content from the past 7 days\r\n    2. Lucky Pick - Gathers content with IMDB rating higher than 8 then picks one from the list\r\n    3. Filters - Contains content filters for different genres\r\n    4. Quick Search - Enables text input of title, actor or genre */}\r\n\r\nlet NetflixNav = () => (\r\n    <Context.Consumer>\r\n         {({state, fetchTitles, fetchNewTitles, clearTitles, clearAllTitles, handleChange, pickRandomTitle, performQuickSearch}) => \r\n        <Navbar bg=\"dark\"  variant=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#\" onClick={() => {clearAllTitles()}} style={{color:'red'}}>Netflix Navigator</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\"> \r\n                <Nav.Link href=\"#\" onClick={() => {fetchNewTitles()}}>What's New</Nav.Link>\r\n                <Nav.Link href=\"#\" onClick={() => {pickRandomTitle()}}>Lucky Pick</Nav.Link>             \r\n                \r\n                {/* Maps genre list from the genres json file */}\r\n                <NavDropdown title=\"Filters\" id=\"basic-nav-dropdown\" >\r\n                    {Genres.map(genre => \r\n                        <NavDropdown.Item href=\"#\" \r\n                            onClick={() => {fetchTitles('', \r\n                            Constants.EARLIEST_PRODUCTION_YEAR,\r\n                            state.currentYear, \r\n                            Constants.ALL_TYPES, \r\n                            genre.id, \r\n                            Constants.DEFAULT_IMDB_MIN,  \r\n                            Constants.DEFAULT_IMDB_MAX)}}>\r\n                            {genre.title}\r\n                        </NavDropdown.Item>)}\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#\">Top Rated</NavDropdown.Item>\r\n                </NavDropdown>\r\n            </Nav>\r\n            \r\n            {/* Quick Search  */}\r\n            <Form inline onSubmit={e => { e.preventDefault();}}>\r\n                <FormControl className=\"mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Quick Search\"\r\n                    name=\"searchString\" \r\n                    value={state.searchString} \r\n                    onChange={handleChange}\r\n                    onKeyDown={(event) => {\r\n                        if(event.keyCode === 13){\r\n                            performQuickSearch();\r\n                        }}\r\n                    }              \r\n                />\r\n                <Button \r\n                    variant=\"outline-danger\"\r\n                    onClick={() => {performQuickSearch()}}\r\n                >Search</Button>\r\n            </Form>             \r\n        </Navbar.Collapse>\r\n        </Navbar>}\r\n    </Context.Consumer>\r\n)\r\n\r\nexport default NetflixNav;","import React from 'react';\r\nimport {Row, Col, Button} from 'react-bootstrap';\r\nimport Context from '../contexts/NetflixContext'\r\n\r\n{/* This component renders the complete details of a title. Data is saved to titleDetail state variable. \r\n    1. Plot \r\n    2. Cast \r\n    3. Director \r\n    4. Producer\r\n    5. Genre\r\n    6. Language\r\n    7. IMDB Rating\r\n    8. Runtime\r\n */}\r\n\r\nconst FullDetailPage = () => {\r\n    return (\r\n        <Context.Consumer>{({state, clearTitle, sanitizeString}) =>     \r\n        <div >\r\n            <hr />\r\n            <div className=\"d-flex justify-content-end\">\r\n                <Button onClick={() => {clearTitle()}} variant=\"danger\">X</Button>\r\n            </div>   \r\n            <h1>{sanitizeString(state.titleDetail.nfinfo.title)}</h1>\r\n            <Row>\r\n                <Col><img src={state.titleDetail.nfinfo.image1} alt={state.titleDetail.nfinfo.title}></img></Col>\r\n                <Col>\r\n                    {/* Only display plot if it's not null */}\r\n                    { state.titleDetailPlot &&   \r\n                        <div>\r\n                            <h5>Plot</h5>\r\n                            <p>{sanitizeString(state.titleDetailPlot)}</p>\r\n                        </div>\r\n                    }\r\n                    <Button\r\n                        variant=\"danger\" \r\n                        href={\"https://www.netflix.com/title/\" + state.titleDetail.nfinfo.netflixid} \r\n                        target=\"_blank\"\r\n                        >Watch Now\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    {/* Only display actor list if it's not null */}\r\n                    { state.titleDetailActors &&\r\n                        <div>\r\n                            <b>Cast</b>\r\n                            <ol>{state.titleDetail.people[0].actor.map((item) => <li key={item.id}>{item}</li>)}</ol>\r\n                        </div>\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <b>Produced</b>\r\n                    <ol>{state.titleDetail.people[1].creator.map((item) => <li key={item.id}>{item}</li>)}</ol>\r\n                    <b>Directed</b>\r\n                    <ol>{state.titleDetail.people[2].director.map((item) => <li key={item.id}>{item}</li>)}</ol>                \r\n                    <p><b>Genre </b>{state.titleDetail.imdbinfo.genre}</p>                  \r\n                    <p><b>Language </b>{state.titleDetail.imdbinfo.language}</p>                \r\n                    <a href={\"https://www.imdb.com/title/\" + state.titleDetail.imdbinfo.imdbid} target=\"_blank\"><p><b>IMDB Rating </b>{state.titleDetail.imdbinfo.rating}</p></a>                   \r\n                    <p><b>Runtime </b>{state.titleDetail.imdbinfo.runtime}</p>\r\n                </Col>\r\n            </Row>\r\n            <hr />\r\n        </div>}\r\n        </Context.Consumer> \r\n    )\r\n}\r\n\r\nexport default FullDetailPage;","import React, { Component } from 'react';\r\nimport Context from '../contexts/NetflixContext'\r\n\r\n{/* Renders image with synopsis in the table component*/}\r\nclass TitleDetail extends Component {\r\n    render () {\r\n        return (\r\n            <Context.Consumer>\r\n                {({sanitizeString}) => \r\n                    <div class=\"media\" style={{margin:'10px'}}>\r\n                        <img class=\"align-self-start mr-3\" src={this.props.title.image} alt={sanitizeString(this.props.title.title)} style={{margin: '5px' ,width: '120px'}}/>\r\n                        <div class=\"media-body\">\r\n                            <h4 class=\"mt-0\">{sanitizeString(this.props.title.title)}</h4>\r\n                            <p><b>Synopsis: </b>{sanitizeString(this.props.title.synopsis)}</p>\r\n                        </div>\r\n                    </div>}\r\n            </Context.Consumer>\r\n        )\r\n    };\r\n}\r\nexport default TitleDetail;","import React from 'react';\r\nimport {Form, Button, Col} from 'react-bootstrap';\r\nimport Context from '../contexts/NetflixContext'\r\nimport Genres from '../data/genres';\r\nimport ContentTypes from '../data/contentTypes';\r\n\r\n{/* Simple component which allows detailed content search using the following data:\r\n    1. Start Year\r\n    2. End Year\r\n    3. Content Type\r\n    4. Content Genre\r\n    5. IMDB Minimum Score\r\n    6. IMDB Maximum Score */}\r\n\r\nconst AdvancedSearch = () => (\r\n    <Context.Consumer>\r\n        {({state, handleChange, fetchTitles, performAdvancedSearch}) => \r\n        <div>\r\n        <Form>\r\n            <Form.Row>\r\n                <Col>\r\n                    <Form.Label>Start Year: </Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Start Year\" defaultValue={state.startYear} name=\"startYear\" onChange={handleChange}/>       \r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>End Year: </Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"End Year\" defaultValue={state.endYear} name=\"endYear\"  onChange={handleChange}/>   \r\n            </Col>\r\n            </Form.Row>\r\n            <Form.Row>\r\n                <Col>\r\n                    <Form.Label>Type: </Form.Label>\r\n                        <Form.Control as=\"select\" name =\"type\" onChange={handleChange}>\r\n                            {ContentTypes.map(type => <option value={type.id}>{type.title}</option>)}              \r\n                        </Form.Control>       \r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>Genre: </Form.Label>\r\n                    <Form.Control as=\"select\" name=\"genreID\" onChange={handleChange}>\r\n                        {Genres.map(genre => <option value={genre.id}>{genre.title}</option>)}\r\n                    </Form.Control>\r\n                </Col>\r\n            </Form.Row>\r\n            <Form.Row>\r\n                <Col>\r\n                    <Form.Label>Lowest IMDB Score: </Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Minimum IMDB score\" defaultValue={state.imdbMin} name=\"imdbMin\" onChange={handleChange}/>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>Highest IMDB Score: </Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Maximum IMDB score\" defaultValue={state.imdbMax} name=\"imdbMax\"  onChange={handleChange}/>   \r\n            </Col>\r\n            </Form.Row>\r\n            <Button \r\n                variant=\"danger\" \r\n                value=\"Search\"\r\n                style ={{marginTop:'10px'}} \r\n                onClick={()=>{ performAdvancedSearch()}}>\r\n                    Search\r\n            </Button>\r\n            </Form>\r\n    </div>}\r\n    </Context.Consumer> \r\n);\r\n\r\nexport default AdvancedSearch;","import React from 'react';\r\nimport Context from '../contexts/NetflixContext'\r\nimport {Jumbotron, Badge, Row, Col} from 'react-bootstrap';\r\nimport AdvancedSearch from '../components/AdvancedSearch'\r\n\r\n{/* Intro page containing a list of the new episodes and the advanced search form*/}\r\nlet Intro = () => (\r\n    <Jumbotron >\r\n        <Context.Consumer>\r\n            {({state}) =>   \r\n        <Row>\r\n            <Col>\r\n                <h1 className=\"d-flex justify-content-start\">Welcome!</h1>\r\n                <hr class=\"my-4\"></hr>\r\n                <h5><Badge variant=\"danger\">NEW EPISODES</Badge></h5>\r\n                <div>\r\n                    {state.episodes.map(title => <li>{title.title}</li>)}\r\n                </div>\r\n            </Col>\r\n            <Col>\r\n                <h5><Badge variant=\"danger\">DETAILED SEARCH</Badge></h5>   \r\n                <AdvancedSearch></AdvancedSearch>\r\n            </Col>\r\n        </Row>}\r\n        </Context.Consumer>\r\n    </Jumbotron>\r\n)\r\n\r\nexport default Intro;\r\n","import React from 'react';\r\nimport {ButtonGroup, Button} from 'react-bootstrap';\r\nimport TitleDetail from './TitleDetail.js'\r\nimport Context from '../contexts/NetflixContext'\r\nimport Intro from '../components/Intro.js'\r\n\r\n/* This component displays a table with three different formats(Icon, Detail and List) depending on the view property received*/\r\n\r\nconst Table = () => {\r\n    return (     \r\n        <Context.Consumer>\r\n            {({state, changeView, fetchTitleDetail, sanitizeString}) => \r\n            <div>\r\n        \r\n            {/* View type selection buttons */}\r\n            { state.allTitles.length > 0 &&\r\n            <div>\r\n                <span className=\"badge badge-light\">Query returned {state.count} results</span>\r\n                <div className=\"d-flex justify-content-center\" style={{marginBottom:\"10px\"}}>     \r\n                    <ButtonGroup size=\"sm\" className=\"mt-4\">\r\n                        <Button variant=\"danger\" onClick={() => {changeView('icon')}}>Icon</Button>\r\n                        <Button variant=\"danger\" onClick={() => {changeView('detail')}}>Detail</Button>\r\n                        <Button variant=\"danger\" onClick={() => {changeView('list')}}>List</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n            </div>\r\n            }\r\n\r\n            {/* Welcome page and advanced search */}\r\n            { \r\n                state.allTitles.length === 0 && <Intro/>\r\n            }\r\n\r\n            {/* Icon View */}\r\n            { \r\n                state.view === 'icon' &&\r\n                <div className=\"d-flex justify-content-center\" style={{ flexWrap: 'wrap'}}>\r\n                    {state.allTitles.map(title => <a href=\"#\" onClick={()=>{fetchTitleDetail(title.netflixid)}}><img src={title.image} alt={title.title} style={{margin: '5px' ,width: '120px'}}/></a> )}\r\n                </div>    \r\n            } \r\n\r\n            {/* Detail View */}\r\n            {\r\n                state.view === 'detail' &&\r\n                <div >\r\n                    {state.allTitles.map(title => <a onClick={()=>{fetchTitleDetail(title.netflixid)}}><TitleDetail title={title} onclick={()=>{fetchTitleDetail(title.netflixid)}}/></a>)}\r\n                </div>\r\n            }\r\n\r\n            {/* List View */}\r\n            {\r\n                state.view === 'list' &&\r\n                <div >\r\n                    <ol className=\"list-group\">\r\n                        {state.allTitles.map(title => \r\n                            <li> \r\n                                <a href=\"#\" \r\n                                    onClick={()=>{fetchTitleDetail(title.netflixid)}}><b>{ sanitizeString(title.title)}</b>\r\n                                </a> \r\n                                <p>{sanitizeString(title.synopsis)}</p>\r\n                                <span class=\"badge badge-warning badge-pill\">IMDB Score: {title.rating}</span>\r\n                            </li>\r\n                            )\r\n                        }\r\n                    </ol>\r\n                </div>\r\n            }\r\n            </div>}\r\n        </Context.Consumer>     \r\n    )\r\n}\r\n\r\nexport default Table;","/**\r\n * Netflix Navigator\r\n * https://github.com/ajadversalo/netflix-navigator\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport {Container} from 'react-bootstrap';\r\nimport Context from '../src/contexts/NetflixContext';\r\nimport ContextProvider from './provider/ContextProvider';\r\nimport NavBar from '../src/components/NavBar';\r\nimport FullDetailPage from '../src/components/FullDetailPage';\r\nimport Table from '../src/components/Table.js';\r\n\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <ContextProvider>\r\n        <Container>\r\n          <NavBar/>\r\n            <Context.Consumer>\r\n              {/* Display the item's full detail page only when titleDetail has a value */}\r\n              {({state}) => state.titleDetail &&  <FullDetailPage/>}\r\n              </Context.Consumer>\r\n          <Table/>\r\n        </Container>\r\n      </ContextProvider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}