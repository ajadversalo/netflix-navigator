{"version":3,"sources":["api/NetflixAPI.js","actions/actions.js","components/NavBar.js","data/Constants.js","components/FullDetailPage.js","components/TitleDetail.js","contexts/NetflixContext.js","components/Intro.js","components/Table.js","App.js","reducers/mainReducer.js","store/Store.js","index.js"],"names":["NetflixAPI","baseUrl","_headers","Headers","append","getNewTitles","callback","request","Request","concat","method","headers","mode","fetch","then","response","console","log","status","json","data","catch","err","getNewEpisodes","getTitles","searchString","startYear","endYear","type","genreID","imdbMin","imdbMax","getTitleDetail","id","RESULT","fetchNewTitles","dispatch","value","fetchTitles","luckyPick","sYear","cYear","allTypes","genreid","length","randomTitleIndex","ITEMS","Math","floor","random","netflixid","clearAllContent","handleChange","e","connect","state","currentYear","bindActionCreators","props","react_default","a","createElement","Navbar","bg","variant","expand","Brand","href","onClick","style","color","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Genres","map","genre","Item","key","Divider","Form","inline","onSubmit","preventDefault","FormControl","placeholder","name","onChange","Button","titleDetail","titleDetailPlot","titleDetailActors","onClearAllTitles","actionCreator","Row","margin","Col","textAlign","lg","sm","sanitizeString","nfinfo","target","Image","src","image1","alt","padding","es_Table","hover","people","actor","item","marginRight","creator","imdbinfo","language","imdbid","rating","TitleDetail","class","image","width","synopsis","createContext","episodes","Jumbotron","Badge","react_carousel_default","slidesPerPage","slidesPerScroll","animationSpeed","autoPlay","stopAutoPlayOnHover","offset","itemWidth","infinite","allTitles","count","view","onChangeView","fetchTitleDetail","marginBottom","ButtonGroup","size","components_Intro","flexWrap","components_TitleDetail","onclick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setCurrentYear","fetchNewEpisodes","string","sanitizedString","split","join","includes","pos","indexOf","substr","Container","NavBar","components_FullDetailPage","components_Table","Component","Date","getFullYear","initialState","mainReducer","arguments","undefined","action","newState","objectSpread","COUNT","plot","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","Store","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.46cdf3db.chunk.js","sourcesContent":["let NetflixAPI = {};\r\nconst baseUrl = 'https://unogs-unogs-v1.p.rapidapi.com/';\r\nconst _headers = new Headers();\r\n_headers.append('X-RapidAPI-Host','unogs-unogs-v1.p.rapidapi.com');\r\n_headers.append('X-RapidAPI-Key','cf523eed82mshed7e62394e60ba7p1091d6jsn2c974a328b59')\r\n\r\nNetflixAPI.getNewTitles = (callback) => {\r\n    let request = new Request(`${baseUrl}/aaapi.cgi?q=get:new7:CA&p=1&t=ns&st=adv`,  {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            console.log('response: ' + response);\r\n            if (response.status !== 200) {\r\n                callback('An error occured getting the response from the server')\r\n                return;\r\n            }\r\n            response.json().then((data) => {\r\n                console.log(data);\r\n                callback(data);                    \r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        }); \r\n}\r\n\r\nNetflixAPI.getNewEpisodes = (callback) => {\r\n    let request = new Request(`${baseUrl}/aaapi.cgi?t=weeklynew&cl=CA&q={query}&st=1`,  {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            console.log('new episodes: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        }); \r\n}\r\n\r\nNetflixAPI.getTitles = (searchString, startYear, endYear, type, genreID, imdbMin, imdbMax, callback) => {\r\n        let request = new Request(`${baseUrl}/aaapi.cgi?q=${searchString}-!${startYear},${endYear}-!0,5-!${imdbMin},${imdbMax}-!${genreID}-!${type}-!english-!Any-!gt0-!{downloadable}&t=ns&cl=33&st=adv&ob=Relevance&p=1&sa=and`, {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            if (response.status !== 200) {\r\n                callback('An error occured getting the response from the server')\r\n                return;\r\n            }\r\n            console.log('response: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        });\r\n}\r\n\r\nNetflixAPI.getTitleDetail = (id, callback) => {\r\n    let request = new Request(`${baseUrl}/aaapi.cgi?t=loadvideo&q=${id}`,  {\r\n        method: 'GET',\r\n        headers: _headers,\r\n        mode: 'cors'\r\n    });\r\n\r\n    fetch(request)\r\n        .then((response) => {\r\n            if (response.status !== 200) {\r\n                callback('An error occured getting the response from the server')\r\n                return;\r\n            }\r\n            console.log('response: ' + response);\r\n            response.json()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    callback(data.RESULT);                    \r\n                });\r\n        })\r\n        .catch((err) => {\r\n            console.log('error: ' + err);\r\n        }); \r\n}\r\n\r\nexport default NetflixAPI;","import NetflixAPI from '../api/NetflixAPI';\r\n\r\nexport const fetchNewTitles = () => {\r\n    return dispatch => { NetflixAPI.getNewTitles((data) => {dispatch({type:'SET_NEW_TITLES', value: data})}) }\r\n}\r\n\r\nexport const fetchTitles = (searchString, startYear, endYear, type, genreID, imdbMin, imdbMax) => {\r\n    return (dispatch) => { NetflixAPI.getTitles(searchString, startYear, endYear, type, genreID, imdbMin, imdbMax, \r\n                           (data) => {dispatch({type:'SET_TITLES', value: data})})\r\n    }\r\n}\r\n\r\nexport const fetchNewEpisodes = () => { \r\n    // return (dispatch) => { NetflixAPI.getNewEpisodes((data) => {{dispatch({type:'SET_NEW_EPISODES', value: data})}}) }\r\n    return dispatch => { NetflixAPI.getNewTitles((data) => {dispatch({type:'SET_NEW_EPISODES', value: data})}) }\r\n}\r\n\r\nexport const fetchTitleDetail = (id) => {\r\n    return (dispatch) => { NetflixAPI.getTitleDetail(id, (data) => {dispatch({type:'SET_TITLE_DETAIL', value: data})})}\r\n}\r\n\r\nconst generateRandomIndex = (length) => {\r\n    let luckyPickIndex = null;\r\n    luckyPickIndex = Math.floor(Math.random() * length);\r\n    return luckyPickIndex;\r\n}\r\n\r\nexport const luckyPick = (searchString, sYear, cYear, allTypes, genreid, imdbMin, imdbMax) => {\r\n    return (dispatch) => {\r\n        NetflixAPI.getTitles(searchString, sYear, cYear, allTypes, genreid, imdbMin, imdbMax, \r\n            (data) => {\r\n                dispatch({type:'SET_TITLES', value: data});\r\n                let randomTitleIndex = generateRandomIndex(data.ITEMS.length);\r\n                console.log(randomTitleIndex);\r\n                if (randomTitleIndex >= 0){\r\n                    NetflixAPI.getTitleDetail(data.ITEMS[randomTitleIndex].netflixid, (data) => {dispatch({type:'SET_TITLE_DETAIL', value: data})})\r\n                }     \r\n            })\r\n    }\r\n}\r\n\r\nexport const setCurrentYear = () => {\r\n    let currentYear = new Date();\r\n    currentYear = currentYear.getFullYear();\r\n    return ({type:'SET_CURRENT_YEAR', value: currentYear})\r\n}\r\n\r\nexport const clearAllContent = () => {\r\n    return ({type:'CLEAR_ALL_CONTENT'})\r\n}\r\n\r\nexport const clearSelectedTitle = () => {\r\n    return ({type:'CLEAR_SELECTED_TITLE'})\r\n}\r\n\r\nexport const changeView = (value) => {\r\n    return ({type:'SET_VIEW', value: value})\r\n}\r\n\r\nexport const handleChange = (e) => {\r\n    return ({type:'HANDLE_CHANGE', value: e})\r\n}","import React from 'react';\r\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\r\nimport * as Constants from '../data/Constants';\r\nimport Genres from '../data/genres';\r\nimport {connect} from 'react-redux';\r\nimport * as actionCreator from '../actions/actions';\r\nimport { clearAllContent, fetchNewTitles, fetchTitles, handleChange, luckyPick} from '../actions/actions';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n{/*This navbar component links to the following functions\r\n    1. What's New - Displays new content from the past 7 days\r\n    2. Lucky Pick - Gathers content with IMDB rating higher than 8 then picks one from the list\r\n    3. Filters - Contains content filters for different genres\r\n    4. Quick Search - Enables text input of title, actor or genre */}\r\n\r\nconst NetflixNav = (props) => {\r\n    return (\r\n        <Navbar bg=\"dark\"  variant=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#\" onClick={props.clearAllContent} style={{color:'red'}}>Netflix Navigator</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\"> \r\n                <Nav.Link href=\"#\" onClick={ props.fetchNewTitles}>What's New</Nav.Link>\r\n                <Nav.Link href=\"#\" onClick={ () => props.luckyPick('', Constants.EARLIEST_PRODUCTION_YEAR, props.currentYear,\r\n                                                                          Constants.ALL_TYPES, Constants.ALL_GENRES, Constants.IMDB_LUCKYPICK_MIN, \r\n                                                                          Constants.IMDB_LUCKYPICK_MAX)}>Lucky Pick</Nav.Link>\r\n                {/* Maps genre list from the genres json file */}\r\n                <NavDropdown title=\"Filters\" id=\"basic-nav-dropdown\" >\r\n                    {Genres.map(genre => \r\n                        <NavDropdown.Item href=\"#\" key={genre.id}\r\n                            onClick={()=> {\r\n                                props.fetchTitles(\r\n                                    '',\r\n                                    Constants.EARLIEST_PRODUCTION_YEAR, \r\n                                    props.currentYear,\r\n                                    Constants.ALL_TYPES, \r\n                                    genre.id,\r\n                                    Constants.DEFAULT_IMDB_MIN,  \r\n                                    Constants.DEFAULT_IMDB_MAX)}}>\r\n                            {genre.title}\r\n                        </NavDropdown.Item>)}\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#\">Top Rated</NavDropdown.Item>\r\n                </NavDropdown>\r\n            </Nav>\r\n            \r\n            {/* Quick Search  */}\r\n            <Form inline onSubmit={e => { \r\n                e.preventDefault();\r\n                props.fetchTitles(props.searchString, \r\n                    Constants.EARLIEST_PRODUCTION_YEAR, \r\n                    props.currentYear, \r\n                    Constants.ALL_GENRES, \r\n                    Constants.ALL_TYPES, \r\n                    Constants.DEFAULT_IMDB_MIN, \r\n                    Constants.DEFAULT_IMDB_MAX);\r\n                }}>\r\n                <FormControl className=\"mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Quick Search\"\r\n                    name=\"searchString\" \r\n                    value={props.searchString || ''} \r\n                    onChange={props.handleChange}            \r\n                />\r\n                <Button variant=\"outline-danger\" type=\"submit\">Search</Button>\r\n            </Form>             \r\n        </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log('mapStateToProps', state);\r\n    return {\r\n        currentYear: state.currentYear,\r\n        searchString: state.searchString\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    console.log('mapDispatchToProps', dispatch);\r\n    return bindActionCreators({\r\n        clearAllContent: clearAllContent,\r\n        fetchNewTitles: fetchNewTitles,\r\n        fetchTitles: fetchTitles,\r\n        handleChange: handleChange,\r\n        luckyPick: luckyPick\r\n    }, dispatch)\r\n        // quickSearch: (searchString, startYear, currentYear, allMediaTypes, genreID, imdbMin, imdbMax) => {\r\n        //     if(searchString === null || searchString.length < 3){ \r\n        //         alert(\"Minimum search entry is 3 characters.\"); \r\n        //     } else {\r\n        //         dispatch(actionCreator.fetchTitles(searchString, startYear, currentYear, allMediaTypes, genreID, imdbMin, imdbMax))\r\n        //     }  \r\n        // }\r\n    //}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NetflixNav);","export const DEFAULT_IMDB_MIN = 0;\r\nexport const DEFAULT_IMDB_MAX = 10;\r\nexport const IMDB_LUCKYPICK_MIN = 8;\r\nexport const IMDB_LUCKYPICK_MAX = 10;\r\nexport const EARLIEST_PRODUCTION_YEAR = 1900;\r\nexport const ALL_TYPES = \"Any\";\r\nexport const ALL_GENRES = \"Any\";\r\nexport const ALL_ITEMS = \"Any\";\r\nexport const DEFAULT_VIEW_TYPE = \"icon\";\r\nexport const DEFAULT_MEDIA_TYPE = \"movie\";\r\nexport default  ALL_ITEMS;","import React from 'react';\r\nimport {Row, Col, Button, Image, Table} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport * as actionCreator from '../actions/actions';\r\n\r\n{/* This component renders the complete details of a title. Data is saved to titleDetail state variable. \r\n    1. Plot \r\n    2. Cast \r\n    3. Director \r\n    4. Producer\r\n    5. Genre\r\n    6. Language\r\n    7. IMDB Rating\r\n    8. Runtime\r\n */}\r\n\r\nconst FullDetailPage = (props) => {\r\n    return (  \r\n        <div >\r\n            <Row className=\"d-flex justify-content-end\" style={{margin:'10px'}}>\r\n                <div >\r\n                    <Button onClick={() => {props.onClearAllTitles()}} variant=\"danger\">X</Button>\r\n                </div>\r\n            </Row>\r\n            <Row >\r\n                <Col style={{textAlign:'center'}} lg={4} sm={12}>\r\n                    <h1>{props.sanitizeString(props.titleDetail.nfinfo.title)}</h1>\r\n                    <a href={\"https://www.netflix.com/title/\" + props.titleDetail.nfinfo.netflixid} target=\"_blank\">\r\n                        <Image src={props.titleDetail.nfinfo.image1} alt={props.titleDetail.nfinfo.title} style={{padding: '5px'}}></Image>\r\n                    </a>\r\n                </Col>\r\n                <Col lg={8} sm={12}>\r\n                    <Table hover>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td><b>Plot</b></td>\r\n                                <td>{props.sanitizeString(props.titleDetailPlot)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>Cast</b></td>\r\n                                <td>{props.titleDetail.people[0].actor.map((item) => <label style={{marginRight:'3px'}}> {item}, </label>)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>Produced</b></td>\r\n                                <td>{props.titleDetail.people[1].creator.map((item) => <label style={{marginRight:'3px'}}> {item}, </label>)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>Directed</b></td>\r\n                                <td>{props.titleDetail.people[0].actor.map((item) => <label style={{marginRight:'3px'}}> {item}, </label>)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>Language</b></td>\r\n                                <td>{props.titleDetail.imdbinfo.language}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>Genre</b></td>\r\n                                <td>{props.titleDetail.imdbinfo.genre}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>IMDB Rating</b></td>\r\n                                <td> <a href={\"https://www.imdb.com/title/\" + props.titleDetail.imdbinfo.imdbid} target=\"_blank\"><p>{props.titleDetail.imdbinfo.rating}</p></a></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><b>Runtime</b></td>\r\n                                <td>{props.titleDetail.imdbinfo.language}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>         \r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log('mapStateToProps', state);\r\n    return {\r\n        titleDetail: state.titleDetail,\r\n        titleDetailPlot: state.titleDetailPlot,\r\n        titleDetailActors: state.titleDetailActors\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    console.log('mapDispatchToProps', dispatch);\r\n    return {\r\n        onClearAllTitles: () => {\r\n            const action = {type: 'CLEAR_SELECTED_TITLE', value: null}\r\n            dispatch(action);\r\n        },\r\n\r\n        fetchNewTitles: () => {\r\n            dispatch(actionCreator.fetchNewTitles())  \r\n        }\r\n    }\r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps)(FullDetailPage);","import React from 'react';\r\n\r\n{/* Renders image with synopsis in the table component */}\r\nconst TitleDetail = (props) => {\r\n    return (\r\n        <div class=\"media\" style={{margin:'10px'}}>\r\n            <img class=\"align-self-start mr-3\" src={props.title.image} alt={props.sanitizeString(props.title.title)} style={{margin: '5px' ,width: '120px'}}/>\r\n            <div class=\"media-body\">\r\n                <h4 class=\"mt-0\">{props.sanitizeString(props.title.title)}</h4>\r\n                <p><b>Synopsis: </b>{props.sanitizeString(props.title.synopsis)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TitleDetail;","import  {createContext} from 'react';\r\nconst NetflixContext = createContext()\r\nexport default NetflixContext;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Jumbotron, Badge, Row, Col} from 'react-bootstrap';\r\nimport AdvancedSearch from '../components/AdvancedSearch';\r\nimport {connect} from 'react-redux';\r\nimport Carousel from '@brainhubeu/react-carousel';\r\nimport '@brainhubeu/react-carousel/lib/style.css';\r\n\r\n{/* Intro page containing a list of the new episodes and the advanced search form*/}\r\nlet Intro = (props) => {\r\n    return (\r\n        <Jumbotron >\r\n            <Row>\r\n                <Col>\r\n                <h5>Welcome to Netflix Navigator! </h5>\r\n                <hr />\r\n                <h6><Badge variant=\"danger\">Getting started:</Badge></h6>\r\n                <ul>\r\n                    <li><b>What's New</b> - Display new titles added over the past week.</li>\r\n                    <li><b>Lucky Pick</b> - Can't decide what to watch? Let us do that for you.</li>\r\n                    <li><b>Filters</b> - Display content categorized by genre</li>\r\n                    <li><b>Quick Search</b> - Search content by title, actor or genre</li>\r\n                    <li><b>Detailed Search</b> - Search using attributes</li>\r\n                </ul>  \r\n                <hr /> \r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Carousel\r\n                        slidesPerPage={3}\r\n                        slidesPerScroll={2}\r\n                        animationSpeed={500}\r\n                        autoPlay={15000}\r\n                        stopAutoPlayOnHover\r\n                        offset={100}\r\n                        itemWidth={180}\r\n                        infinite>\r\n                        {props.episodes.map(title => <img src={title.image} alt='new content'/>)}                    \r\n                    </Carousel>\r\n                </Col>\r\n            </Row>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        episodes: state.episodes\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Intro);\r\n","import React from 'react';\r\nimport {ButtonGroup, Button} from 'react-bootstrap';\r\nimport TitleDetail from './TitleDetail.js'\r\nimport Intro from '../components/Intro.js'\r\nimport {connect} from 'react-redux';\r\nimport * as actionCreator from '../actions/actions';\r\n\r\n/* This component displays a table with three different formats(Icon, Detail and List) depending on the view property received*/\r\nconst Table = (props) => {\r\n\r\n    if (!props.allTitles) {\r\n        return null;\r\n    }\r\n\r\n    return (     \r\n        <div>     \r\n            {/* View type selection buttons */}\r\n            { props.allTitles.length > 0 &&\r\n            <div>\r\n                <span className=\"badge badge-light\">Query returned {props.count} results</span>\r\n                <div className=\"d-flex justify-content-center\" style={{marginBottom:\"10px\"}}>     \r\n                    <ButtonGroup size=\"sm\" className=\"mt-4\">\r\n                        <Button variant=\"danger\" onClick={() => {props.onChangeView('icon')}}>Icon</Button>\r\n                        <Button variant=\"danger\" onClick={() => {props.onChangeView('detail')}}>Detail</Button>\r\n                        <Button variant=\"danger\" onClick={() => {props.onChangeView('list')}}>List</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n            </div>}\r\n            {/* Welcome page and advanced search */}\r\n            {props.allTitles.length < 1 && <Intro />}\r\n            {/* Icon View */}\r\n            { props.view === 'icon' &&\r\n            <div className=\"d-flex justify-content-center\" style={{ flexWrap: 'wrap'}}>\r\n                {props.allTitles.map(title => <a href=\"#\" onClick={()=>{\r\n                    props.fetchTitleDetail(title.netflixid)\r\n                    }}><img src={title.image} alt={title.title} style={{margin: '5px' ,width: '120px'}}/></a> )}\r\n            </div>}   \r\n            {/* Detail View */}       \r\n            {props.view === 'detail' &&\r\n            <div>\r\n                {props.allTitles.map(title => <a onClick={()=>{props.fetchTitleDetail(title.netflixid)}}>\r\n                    <TitleDetail title={title} sanitizeString={props.sanitizeString} onclick={()=>{props.fetchTitleDetail(title.netflixid)}}/></a>)}\r\n            </div>}\r\n            {/* List View */}\r\n            {props.view === 'list' &&\r\n            <div >\r\n                <ol className=\"list-group\">\r\n                    {props.allTitles.map(title => \r\n                        <li> \r\n                            <a href=\"#\" onClick={()=>{props.fetchTitleDetail(title.netflixid)}}><b>{props.sanitizeString(title.title)}</b></a> \r\n                            <p>{props.sanitizeString(title.synopsis)}</p>\r\n                            <span class=\"badge badge-warning badge-pill\">IMDB Score: {title.rating}</span>\r\n                        </li>\r\n                        )\r\n                    }\r\n                </ol>\r\n            </div>}\r\n        </div> \r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        allTitles: state.allTitles,\r\n        count: state.count,\r\n        view: state.view,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangeView: (value) => {\r\n            dispatch(actionCreator.changeView(value));\r\n        },\r\n        fetchTitleDetail: (netflixid) => {\r\n            dispatch(actionCreator.fetchTitleDetail (netflixid))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","/**\r\n * Netflix Navigator\r\n * https://github.com/ajadversalo/netflix-navigator\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport {Container} from 'react-bootstrap';\r\nimport NavBar from '../src/components/NavBar';\r\nimport FullDetailPage from '../src/components/FullDetailPage';\r\nimport Table from '../src/components/Table.js';\r\nimport {connect} from 'react-redux';\r\nimport * as actionCreator from '../src/actions/actions';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\ncomponentDidMount = () => {\r\n  this.props.setCurrentYear();\r\n  this.props.fetchNewEpisodes();\r\n}\r\n\r\nsanitizeString = (string) => {\r\n  let sanitizedString = string;\r\n  sanitizedString = sanitizedString.split(\"&amp;#39;\").join(\"'\");\r\n  sanitizedString = sanitizedString.split(\"&#39;\").join(\"'\");\r\n  sanitizedString = sanitizedString.split(\"&rsquo;\").join(\"'\");\r\n  if (sanitizedString.includes(\"<\")) {\r\n    let pos = sanitizedString.indexOf(\"<\"); \r\n    sanitizedString = sanitizedString.substr(0,pos);\r\n  }\r\n  return sanitizedString;\r\n}\r\n\r\nrender(){\r\n  return (\r\n    <Container>\r\n      <NavBar />\r\n      { this.props.titleDetail &&  \r\n        <FullDetailPage sanitizeString={this.sanitizeString}/>\r\n      }\r\n      <Table sanitizeString={this.sanitizeString}/>      \r\n    </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      titleDetail: state.titleDetail,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      fetchNewEpisodes: () => {\r\n        dispatch(actionCreator.fetchNewEpisodes());\r\n      },\r\n      setCurrentYear: () => {\r\n        dispatch(actionCreator.setCurrentYear())\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as Constants from '../data/Constants';\r\n\r\nconst initialState = {\r\n    allTitles:  [],\r\n    count: 0,\r\n    episodes: [],\r\n    titleDetail : null,\r\n    titleDetailPlot: null,\r\n    titleDetailActors: [],\r\n    startYear: Constants.EARLIEST_PRODUCTION_YEAR, \r\n    endYear: null,      // Used in advanced search\r\n    currentYear: null,  // Used in quick search\r\n    searchString: null,\r\n    genreID: null,\r\n    view: Constants.DEFAULT_VIEW_TYPE,\r\n    type: Constants.DEFAULT_MEDIA_TYPE,\r\n    imdbMin: Constants.DEFAULT_IMDB_MIN,\r\n    imdbMax: Constants.DEFAULT_IMDB_MAX\r\n};\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    console.log('reducer running', action);\r\n    const newState = {...state};\r\n    switch(action.type) {\r\n        case 'SET_ALL_TITLES':\r\n            newState.allTitles = action.value;\r\n            break;\r\n        case 'SET_VIEW':\r\n            newState.view = action.value;\r\n            break;\r\n        case 'SET_TITLES':\r\n            newState.allTitles = action.value.ITEMS;\r\n            newState.count = action.value.COUNT;\r\n            newState.titleDetail = null;\r\n            break;\r\n        case 'SET_NEW_TITLES':\r\n            newState.allTitles = action.value.ITEMS;\r\n            newState.count = action.value.COUNT;\r\n            newState.titleDetail = null;\r\n            break;\r\n        case 'SET_NEW_EPISODES':\r\n            // newState.episodes = action.value.results;\r\n            newState.episodes = action.value.ITEMS;\r\n            break;\r\n        case 'SET_CURRENT_YEAR':\r\n            newState.currentYear = action.value;\r\n            break;\r\n        case 'SET_TITLE_DETAIL':\r\n            newState.titleDetail = action.value;\r\n            newState.titleDetailPlot = action.value.imdbinfo.plot;\r\n            newState.titleDetailActors = action.value.people[0].actor;\r\n            break;\r\n        case 'CLEAR_ALL_CONTENT':\r\n            newState.allTitles = [];\r\n            newState.titleDetail = null;\r\n            break;\r\n        case 'CLEAR_SELECTED_TITLE':\r\n            newState.titleDetail = null;\r\n            break;\r\n        case 'HANDLE_CHANGE':\r\n            newState.searchString = action.value.target.value;\r\n            break;\r\n    }\r\n    return newState;\r\n}\r\n\r\nexport default mainReducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport mainReducer from '../reducers/mainReducer'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(mainReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Store from './store/Store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={Store}>\r\n        <App /> \r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}